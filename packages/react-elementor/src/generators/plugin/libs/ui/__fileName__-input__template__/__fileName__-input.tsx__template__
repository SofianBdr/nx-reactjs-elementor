import {update<%=classComponent%>Entity} from '@<%=npmScope%>/store'
import React, {FormEvent, RefObject, useRef} from 'react';
import {useDispatch} from 'react-redux';
import {Button, Grid, TextField} from '@mui/material';
import PropTypes from 'prop-types';

export default function <%=className%>Input({ textFieldLabel,
                                      handleSubmit,
                                      buttonLabel,
                                      inputRef
                                    }) {

  return (
    <form onSubmit={handleSubmit}>
          <Grid
            container
            justifyContent="center"
            alignItems="center"
            direction={"row"}
            spacing={2}>
            <Grid item>
              <TextField
                type="text "
                label={textFieldLabel ? textFieldLabel : 'Type a new title'}
                variant="outlined"
                inputRef={inputRef}
              />
            </Grid>
            <Grid item>
              <Button type="submit" variant="outlined">
                {buttonLabel ? buttonLabel : 'Update title'}
              </Button>
            </Grid>
          </Grid>
      </form>
  );
}

/**
* Same component linked to the store
*/
export function <%=className%>InputStore({placeholder, button}) {
  const dispatch = useDispatch()
  const input: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null)

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    dispatch(update<%=classComponent%>Entity(input.current && input.current.value))
    input.current && (input.current.value = '')
    input.current && input.current.focus()
  }
  return <<%=className%>Input textFieldLabel={placeholder} buttonLabel={button} handleSubmit={(e: FormEvent<HTMLFormElement>) => handleSubmit(e)} inputRef={input}/>
}


/**
 * Exposing props to elementor through the web component
 */
<%=className%>InputStore.propTypes = {
  placeholder: PropTypes.string,
  button: PropTypes.string
};

